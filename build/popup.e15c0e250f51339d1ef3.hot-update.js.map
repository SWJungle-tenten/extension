{"version":3,"file":"popup.e15c0e250f51339d1ef3.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAMA;AACA;AACA;AAAA;AAOA;AAAA;AA/DA;AAiEA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpEA","sources":["webpack://react-chrome-app/./src/pages/popup/Popup.jsx","webpack://react-chrome-app/webpack/runtime/getFullHash"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { HOMEPAGE_ADDR, SERVER_ADDR } from \"../../../utils/env\";\n\nconst Popup = () => {\n  const [accessToken, setAccessToken] = useState(null);\n  const [userName, setUserName] = useState(null);\n\n  chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    if (message.action === \"updateToken\") {\n      setAccessToken(message.accessToken);\n    }\n  });\n\n  useEffect(() => {\n    chrome.runtime.sendMessage({ action: \"getToken\" }, (response) => {\n      console.log(\"got accessToken\", response.accessToken);\n      setAccessToken(response.accessToken);\n    });\n  }, [setAccessToken]);\n\n  const gotoHomepage = (url) => {\n    chrome.tabs.create({ url });\n  };\n\n  useEffect(() => {\n    if (accessToken) {\n      const getUserName = async (accessToken) => {\n        try {\n          const response = await fetch(`${SERVER_ADDR}/giveUserName`, {\n            method: \"post\",\n            headers: new Headers({\n              Authorization: `Bearer ${accessToken}`,\n            }),\n          });\n          const data = await response.json();\n          setUserName(data.username);\n        } catch (error) {\n          console.log(error);\n        }\n      };\n      getUserName(accessToken);\n    }\n  }, [accessToken]);\n\n  return (\n    <div style={{ width: \"300px\", display: \"flex\", flexDirection: \"column\" }}>\n      <p>{accessToken ? `환영합니다 ${userName}님!` : \"스크랩하려면 로그인해주세요.\"}</p>\n      {accessToken ? (\n        <button\n          onClick={() => {\n            gotoHomepage(HOMEPAGE_ADDR + \"/storage\");\n          }}\n        >\n          보관함 가기\n        </button>\n      ) : (\n        <button\n          onClick={() => {\n            gotoHomepage(HOMEPAGE_ADDR);\n          }}\n        >\n          로그인 하러가기\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default Popup;\n","__webpack_require__.h = () => (\"5fe480460e2dda145a93\")"],"names":[],"sourceRoot":""}